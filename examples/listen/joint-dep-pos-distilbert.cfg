[training]
patience = 10000
eval_frequency = 200
dropout = 0.1
init_tok2vec = null
vectors = null
max_epochs = 100
orth_variant_level = 0.0
gold_preproc = false
max_length = 0
scores = ["tags_acc", "uas", "las"]
score_weights = {"las": 0.8, "tags_acc": 0.2}
limit = 0
width = 768
use_gpu = 0
seed = 0
accumulate_gradient = 4

[training.batch_size]
@schedules = "compounding.v1"
start = 8
stop = 8
compound = 1.001

[optimizer]
@optimizers = "Adam.v1"
beta1 = 0.9
beta2 = 0.999
L2_is_weight_decay = true
L2 = 0.01
grad_clip = 1.0
use_averages = true
eps = 1e-8

[optimizer.learn_rate]
@schedules = "warmup_linear.v1"
initial_rate = 5e-5
warmup_steps = 250
total_steps = 5000

[nlp]
lang = "en"
vectors = ${training:vectors}

[nlp.pipeline.transformer]
factory = "transformer"

[nlp.pipeline.transformer.model]
@architectures = "spacy.TransformerByName.v2"
name = "distilbert-base-uncased"
fast_tokenizer = true

[nlp.pipeline.transformer.model.get_spans]
@layers = "spacy-transformers.strided_spans.v1"
window = 256
stride = 196

[nlp.pipeline.tagger]
factory = "tagger"

[nlp.pipeline.parser]
factory = "parser"

[nlp.pipeline.tagger.model]
@architectures = "spacy.Tagger.v1"

[nlp.pipeline.parser.model]
@architectures = "spacy.TransitionBasedParser.v1"
nr_feature_tokens = 8
hidden_width = 256
maxout_pieces = 3

[nlp.pipeline.tagger.model.tok2vec]
@architectures = "spacy.Tok2VecTransformerListener.v1"
width = ${training:width}
grad_factor = 1.0

[nlp.pipeline.tagger.model.tok2vec.pooling]
@layers = "reduce_mean.v1"

[nlp.pipeline.parser.model.tok2vec]
@architectures = "spacy.Tok2VecTransformerListener.v1"
width = ${training:width}
grad_factor = 1.0

[nlp.pipeline.parser.model.tok2vec.pooling]
@layers = ${nlp.pipeline.tagger.model.tok2vec.pooling:@layers}